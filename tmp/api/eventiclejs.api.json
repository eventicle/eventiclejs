{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.29.5",
    "schemaVersion": 1009,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@eventicle/eventiclejs!",
  "docComment": "",
  "name": "@eventicle/eventiclejs",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@eventicle/eventiclejs!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Variable",
          "canonicalReference": "@eventicle/eventiclejs!aggregateObservationAdapter:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "aggregateObservationAdapter: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "AggregateObservationAdapter",
              "canonicalReference": "@eventicle/eventiclejs!~AggregateObservationAdapter:class"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "aggregateObservationAdapter",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!aggregateObserver:function(1)",
          "docComment": "/**\n * Block for an asynchronous, event based, workflow to occur.\n *\n * Reads streams and allows short lived observers to be notified if a particular AggregateRoot instance has been modified. This is picked out based on the `domainId` of the event.\n *\n * This allows a synchronous API to block and wait for asynchronous changes to finish occurring before continuing processing\n *\n * For example, given a `User` {@link AggregateRoot}, you can wait for a Saga (or other operational component) to approve a user account, by blocking until the given `User` has raised the `user.approved` event.\n * ```\n * export class UserAggregate extends AggregateRoot {\n *   approved: boolean = false\n *\n *   constructor() {\n *      super(\"User\")\n *\n *      this.reducers = []\n *      // persist the approval in the current aggregate state.\n *      // This avoids any potential race conditions between performing the action that requires\n *      // approval and the observer starting to monitor. See below.\n *      this.reducers[\"user.approved\"] = (ev) => {\n *        this.approved = true\n *      }\n *   }\n *\n *   approve() {\n *     this.raiseEvent({\n *       type: \"user.approved\",\n *       data: {}\n *       // other event fields\n *     })\n *   }\n * }\n * ```\n *\n * First register the observer. This will open a new event subscription, with a dynamically generated consumer group. All events on the topic will be received by this instances, so be mindful of doing this on topics with large volumes of data.\n * ```\n *   await registerAdapter(createAggregateObservationAdapter([AnAggregate]));\n * ```\n *\n * In your synchronous API (eg, HTTP/ REST, GQL).\n * ```\n * // The userId is the domainId of the UserAggregate instance we want to observe\n * export doActionThatRequiresApproval(userId: string) {\n *\n *   // perform some action that triggers async workflows\n *\n *   // now wait for the User to be approved\n *   const user = await aggregateObserver(\n *                             UserAggregate,\n *                             userId,  // the UserAggregate domainId\n *                             10000,   // max time to wait for the User instance to come into the required state\n *                             (ar, ev) => {\n *           // this is called once straight away with just the current state of the User aggregate (ev is null)\n *           // then, every time an event is observed for the UserAggregate with the domainId == userId\n *           // check the current state of the aggregate is what you want to see, or the event being received\n *           // is the one you are waiting for.  Or, ideally, both of those things\n *           // doing both will avoid any race conditions.\n *      return ev && ev.type == \"user.approved\" || ar.approved\n *   });\n *\n *   // user is now approved, or an Error has been thrown\n *   // perform any ops on the user as required.\n *\n * }\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function aggregateObserver<AR extends "
            },
            {
              "kind": "Reference",
              "text": "AggregateRoot",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot:class"
            },
            {
              "kind": "Content",
              "text": ">(aggregateType: "
            },
            {
              "kind": "Content",
              "text": "{\n    new (...params: any[]): AR;\n}"
            },
            {
              "kind": "Content",
              "text": ", id: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", timeout: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ", exec: "
            },
            {
              "kind": "Content",
              "text": "(ar: AR, event?: "
            },
            {
              "kind": "Reference",
              "text": "EventicleEvent",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
            },
            {
              "kind": "Content",
              "text": ") => boolean"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<AR>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 13,
            "endIndex": 15
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "aggregateType",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "id",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "timeout",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            },
            {
              "parameterName": "exec",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 12
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "AR",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "aggregateObserver"
        },
        {
          "kind": "Class",
          "canonicalReference": "@eventicle/eventiclejs!AggregateRoot:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class AggregateRoot "
            }
          ],
          "releaseTag": "Public",
          "name": "AggregateRoot",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `AggregateRoot` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(type: "
                },
                {
                  "kind": "Content",
                  "text": "string | "
                },
                {
                  "kind": "Reference",
                  "text": "AggregateConfig",
                  "canonicalReference": "@eventicle/eventiclejs!AggregateConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#config:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly config: "
                },
                {
                  "kind": "Reference",
                  "text": "AggregateConfig",
                  "canonicalReference": "@eventicle/eventiclejs!AggregateConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "config",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#currentCheckpoint:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "currentCheckpoint(): "
                },
                {
                  "kind": "Content",
                  "text": "object"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "currentCheckpoint"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#handleEvent:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleEvent(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "handleEvent"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#history:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "history: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "history",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#newEvents:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "newEvents: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "newEvents",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#raiseEvent:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "raiseEvent(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "raiseEvent"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#reducers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reducers: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reducers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#replaying:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "replaying: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "replaying",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get type(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@eventicle/eventiclejs!aggregates:var",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "_default: "
            },
            {
              "kind": "Reference",
              "text": "AggregateRepository",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRepository:interface"
            }
          ],
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "aggregates",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!allSagaInstances:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function allSagaInstances(workspaceId?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SagaInstance",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance:class"
            },
            {
              "kind": "Content",
              "text": "<any, any>[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "workspaceId",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": true
            }
          ],
          "name": "allSagaInstances"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!allSagas:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function allSagas(): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Saga",
              "canonicalReference": "@eventicle/eventiclejs!Saga:class"
            },
            {
              "kind": "Content",
              "text": "<any, any>[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "allSagas"
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@eventicle/eventiclejs!apm:namespace",
          "docComment": "",
          "excerptTokens": [],
          "releaseTag": "None",
          "name": "apm",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@eventicle/eventiclejs!apm.apmJoinEvent:function(1)",
              "docComment": "/**\n * Will join the APM transaction that is stamped in the event header - `apmTrace`\n *\n * This will generate a new span within the APM transaction.\n *\n * @param event - the event to join the APM trace on\n *\n * @param name - The name of the APM transaction\n *\n * @param type - the APM type\n *\n * @param subtype - the APM subtype\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function apmJoinEvent(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", subtype: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "subtype",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "apmJoinEvent"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!Command:interface",
          "docComment": "/**\n * A Command.\n *\n * It is generally preferred {@link dispatchDirectCommand} where the command definition is implicit, and more fully type checked.\n *\n * This, along with {@link dispatchCommand} is available if you wish to separate your code more fully, or introduce a remote capable message based command bus.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Command<I, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Command",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!Command#execute:member",
              "docComment": "/**\n * The command handler function. The data will be received from the CommandIntent\n *\n * This may be called concurrently.\n *\n * This should attempt to modify the system and then emit events to represent the change.\n *\n * @param data - \n *\n * @example\n *\n * the most command pattern is to use an AggregateRoot to generate the events\n * ```\n *  const myCommand = {\n *    type: \"approve-user\",\n *    streamToEmit: \"user\",\n *    execute: async (data) => {\n *       const user = await aggregates.load(UserAggregate, data.userId);\n *       user.approve();\n *       return {\n *         // aggregates returns all the events that were generated after the\n *         // aggregate was loaded, after it has persisted.\n *         events: await aggregates.persist(user);\n *       }\n *    }\n *  }\n * ```\n *\n * this can be called like so\n *\n * ``` async function example() { // other setup await registerCommand(myCommand);\n *\n * await dispatchCommand({ type: \"something\", data: { userId: \"theuser\" } }); }\n *\n * example(); ```\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "execute: "
                },
                {
                  "kind": "Content",
                  "text": "(data: I) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "CommandReturn",
                  "canonicalReference": "@eventicle/eventiclejs!CommandReturn:interface"
                },
                {
                  "kind": "Content",
                  "text": "<O>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "execute",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!Command#streamToEmit:member",
              "docComment": "/**\n * The event stream that any events in the CommandReturn should be emitted on\n *\n * @see\n *\n * EventClient\n *\n * @see\n *\n * CommandReturn#events\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "streamToEmit: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "streamToEmit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!Command#type:member",
              "docComment": "/**\n * The name of the Command. This is used to look it up when the user calls {@link dispatchCommand}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!CommandIntent:interface",
          "docComment": "/**\n * A CommandIntent is a message instructing Eventicle to perform an action that may emit events that should be sent externally using the {@link EventClient}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CommandIntent<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "CommandIntent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!CommandIntent#data:member",
              "docComment": "/**\n * The data that will be used when calling the Command instance.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!CommandIntent#type:member",
              "docComment": "/**\n * The command type\n *\n * @see\n *\n * Command#type\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!CommandReturn:interface",
          "docComment": "/**\n * The global return type for {@link Command}, whether the command is explicit, as in {@link dispatchCommand}, or implicit, as in {@link dispatchDirectCommand}.\n *\n * This return type is passed to the caller, but before that happens, it will be processed by the dispatcher to capture any events that need to be emitted.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface CommandReturn<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "CommandReturn",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!CommandReturn#events:member",
              "docComment": "/**\n * Any events that have been generated during command execution that should be emitted externally onto the configured topic. By the time the calling code receives the return, the events have already been passed to {@link EventClient#emit}, and cannot be altered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "events: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!CommandReturn#response:member",
              "docComment": "/**\n * An optional response object. This will be ignored by the command dispatcher, and passed through to the calling code. Most commonly used to pass IDs that have been generated during command execution.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "response?: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "response",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!CommandReturn#webError:member",
              "docComment": "/**\n * Optional error property.\n *\n * Used by some implementations to indicate that the Command finished in an Error, which should now be thrown.\n *\n * This is performed so that the command can emit events (describing the error), and also instruct the calling code (which is normally a synchronous API) to subsequently throw the given Error back to the user.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "webError?: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "webError",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!connectBroker:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function connectBroker(config: "
            },
            {
              "kind": "Reference",
              "text": "KafkaConfig",
              "canonicalReference": "kafkajs!KafkaConfig:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "connectBroker"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!consumeFullEventLog:function(1)",
          "docComment": "/**\n * Will cold replay the entire event stream into a list.\n *\n * Mostly useful for testing, use against long running event streams/ Kafka will blow your local memory!\n *\n * @param stream - The event stream to cold replay\n *\n * @see\n *\n * EventClient#coldStream\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function consumeFullEventLog(stream: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventicleEvent",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
            },
            {
              "kind": "Content",
              "text": "[]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "stream",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "consumeFullEventLog"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!createAggregateObservationAdapter:function(1)",
          "docComment": "/**\n * Create a new EventAdapter with a dynamic Consumer group id that will subscribe to the topics for the given AggregateRoots\n *\n * @param aggregates - the list of aggregate roots to observe. Their topic names will be extracted.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createAggregateObservationAdapter<AR extends "
            },
            {
              "kind": "Reference",
              "text": "AggregateRoot",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot:class"
            },
            {
              "kind": "Content",
              "text": ">(aggregates: "
            },
            {
              "kind": "Content",
              "text": "{\n    new (): AR;\n}[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AggregateObservationAdapter",
              "canonicalReference": "@eventicle/eventiclejs!~AggregateObservationAdapter:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "aggregates",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "AR",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createAggregateObservationAdapter"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!dispatchCommand:function(1)",
          "docComment": "/**\n * This will lookup a pre-registered {@link Command} from the {@link CommandIntent#type}, then execute the command with the given payload.\n *\n * It is generally preferred {@link dispatchDirectCommand} where the command definition is implicit, and more fully type checked.\n *\n * This, along with {@link dispatchCommand} is available if you wish to separate your code more fully, or introduce a remote capable message based command bus.\n *\n * @param commandIntent - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dispatchCommand<T>(commandIntent: "
            },
            {
              "kind": "Reference",
              "text": "CommandIntent",
              "canonicalReference": "@eventicle/eventiclejs!CommandIntent:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CommandReturn",
              "canonicalReference": "@eventicle/eventiclejs!CommandReturn:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "commandIntent",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "dispatchCommand"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!dispatchDirectCommand:function(1)",
          "docComment": "/**\n * Dispatch a command directly, without a CommandIntent message in between.\n *\n * Cannot be distributed or load balanced, but requires less boilerplate.\n *\n * @example\n *\n * Note that no registration of the Command is necessary. This is functionally the same as in {@link Command#execute}\n * ```\n *  await dispatchDirectCommand(() => {\n *       const user = await aggregates.load(UserAggregate, data.userId);\n *       user.approve();\n *       return {\n *         // aggregates returns all the events that were generated after the\n *         // aggregate was loaded, after it has persisted.\n *         events: await aggregates.persist(user);\n *       }\n *  }, \"user\")\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function dispatchDirectCommand<T>(command: "
            },
            {
              "kind": "Content",
              "text": "() => "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "CommandReturn",
              "canonicalReference": "@eventicle/eventiclejs!CommandReturn:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ", streamToEmit: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "command",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "streamToEmit",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "dispatchDirectCommand"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!EncodedEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EncodedEvent "
            }
          ],
          "releaseTag": "Public",
          "name": "EncodedEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EncodedEvent#buffer:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!\"\\\"buffer\\\"\"~__global.Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "buffer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EncodedEvent#headers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [key: string]: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EncodedEvent#key:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "key",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EncodedEvent#timestamp:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timestamp: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timestamp",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!EventAdapter:interface",
          "docComment": "/**\n * An adapter is an observer on an event stream.\n *\n * It only operates on hot event data, and will never attempt to replay everything\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EventAdapter "
            }
          ],
          "releaseTag": "Public",
          "name": "EventAdapter",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventAdapter#consumerGroup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "consumerGroup: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "consumerGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventAdapter#errorHandler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorHandler?: "
                },
                {
                  "kind": "Content",
                  "text": "(adapter: "
                },
                {
                  "kind": "Reference",
                  "text": "EventAdapter",
                  "canonicalReference": "@eventicle/eventiclejs!EventAdapter:interface"
                },
                {
                  "kind": "Content",
                  "text": ", event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "errorHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventAdapter#handleEvent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleEvent: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "handleEvent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventAdapter#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventAdapter#streamsToSubscribe:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "streamsToSubscribe: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "streamsToSubscribe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!eventClient:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function eventClient(): "
            },
            {
              "kind": "Reference",
              "text": "EventClient",
              "canonicalReference": "@eventicle/eventiclejs!EventClient:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "eventClient"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!EventClient:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EventClient "
            }
          ],
          "releaseTag": "Public",
          "name": "EventClient",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventClient#coldHotStream:member",
              "docComment": "/**\n * Play from persisted storage the continue from in memory\n *\n * @param stream - \n *\n * @param from - \n *\n * @param handler - \n *\n * @param onError - \n *\n * @param onDone - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coldHotStream: "
                },
                {
                  "kind": "Content",
                  "text": "(config: {\n        rawEvents: true;\n        stream: string | string[];\n        groupId?: string;\n        handler: (event: "
                },
                {
                  "kind": "Reference",
                  "text": "EncodedEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EncodedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>;\n        onError: (error: any) => void;\n    } | {\n        rawEvents: false;\n        stream: string | string[];\n        groupId?: string;\n        handler: (event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>;\n        onError: (error: any) => void;\n    } | {\n        stream: string | string[];\n        groupId?: string;\n        handler: (event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>;\n        onError: (error: any) => void;\n    }) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionControl",
                  "canonicalReference": "@eventicle/eventiclejs!EventSubscriptionControl:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "coldHotStream",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 18
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventClient#coldStream:member",
              "docComment": "/**\n * Play from persisted storage\n *\n * @param stream - \n *\n * @param from - \n *\n * @param handler - \n *\n * @param onError - \n *\n * @param onDone - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "coldStream: "
                },
                {
                  "kind": "Content",
                  "text": "(stream: string, handler: (event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>, onError: (error: any) => void, onDone: () => void) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionControl",
                  "canonicalReference": "@eventicle/eventiclejs!EventSubscriptionControl:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "coldStream",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventClient#emit:member",
              "docComment": "/**\n * @param event - \n *\n * @param stream - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "[] | "
                },
                {
                  "kind": "Reference",
                  "text": "EncodedEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EncodedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "[], stream: string) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "emit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventClient#hotRawStream:member",
              "docComment": "/**\n * Only play hot data.\n *\n * @param stream - \n *\n * @param consumerName - \n *\n * @param handler - \n *\n * @param onError - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hotRawStream: "
                },
                {
                  "kind": "Content",
                  "text": "(stream: string | string[], consumerName: string, handler: (event: "
                },
                {
                  "kind": "Reference",
                  "text": "EncodedEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EncodedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>, onError: (error: any) => void) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionControl",
                  "canonicalReference": "@eventicle/eventiclejs!EventSubscriptionControl:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hotRawStream",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventClient#hotStream:member",
              "docComment": "/**\n * Only play hot data.\n *\n * @param stream - \n *\n * @param consumerName - \n *\n * @param handler - \n *\n * @param onError - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hotStream: "
                },
                {
                  "kind": "Content",
                  "text": "(stream: string | string[], consumerName: string, handler: (event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>, onError: (error: any) => void) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionControl",
                  "canonicalReference": "@eventicle/eventiclejs!EventSubscriptionControl:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "hotStream",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventClient#isConnected:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isConnected: "
                },
                {
                  "kind": "Content",
                  "text": "() => boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isConnected",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventClient#shutdown:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shutdown: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "shutdown",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!eventClientCodec:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function eventClientCodec(): "
            },
            {
              "kind": "Reference",
              "text": "EventClientCodec",
              "canonicalReference": "@eventicle/eventiclejs!EventClientCodec:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "eventClientCodec"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!EventClientCodec:interface",
          "docComment": "/**\n * Convert {@link EventicleEvent} to/ from {@link EncodedEvent}.\n *\n * EncodedEvent is suitable for the {@link EventClient} implementations to send on the wire, as it is a Buffer and a set of message headers.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EventClientCodec "
            }
          ],
          "releaseTag": "Public",
          "name": "EventClientCodec",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventClientCodec#decode:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "decode: "
                },
                {
                  "kind": "Content",
                  "text": "(encoded: "
                },
                {
                  "kind": "Reference",
                  "text": "EncodedEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EncodedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "decode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventClientCodec#encode:member",
              "docComment": "/**\n * Convert a raw event binary (as a {@link EncodedEvent}) into a {@link EventicleEvent}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "encode: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EncodedEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EncodedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "encode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!eventClientOnDatastore:function(1)",
          "docComment": "/**\n * This is a test capable event client.\n *\n * It fully implements the event client semantics, and persists its events into the given data store.\n *\n * Good to pair with the InMemDataStore for testing and local dev usage.\n *\n * Not recommended for production (really!), as you disable any possibility of distribution\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function eventClientOnDatastore(): "
            },
            {
              "kind": "Reference",
              "text": "EventClient",
              "canonicalReference": "@eventicle/eventiclejs!EventClient:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "eventClientOnDatastore"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!eventClientOnKafka:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function eventClientOnKafka(config: "
            },
            {
              "kind": "Reference",
              "text": "KafkaConfig",
              "canonicalReference": "kafkajs!KafkaConfig:interface"
            },
            {
              "kind": "Content",
              "text": ", consumerConfig?: "
            },
            {
              "kind": "Reference",
              "text": "ConsumerConfigFactory",
              "canonicalReference": "@eventicle/eventiclejs!ConsumerConfigFactory:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventClient",
              "canonicalReference": "@eventicle/eventiclejs!EventClient:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "config",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "consumerConfig",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": true
            }
          ],
          "name": "eventClientOnKafka"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EventicleEvent "
            }
          ],
          "releaseTag": "Public",
          "name": "EventicleEvent",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent#causedById:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "causedById?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "causedById",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent#causedByType:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "causedByType?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "causedByType",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent#createdAt:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createdAt?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "createdAt",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent#data:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "data",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent#domainId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "domainId?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "domainId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent#id:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent#source:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "source?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent#stream:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stream?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "stream",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!eventSourceName:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function eventSourceName(): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "eventSourceName"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!EventView:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EventView "
            }
          ],
          "releaseTag": "Public",
          "name": "EventView",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventView#consumerGroup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "consumerGroup: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "consumerGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventView#handleEvent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleEvent: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "handleEvent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!EventView#streamsToSubscribe:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "streamsToSubscribe: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "streamsToSubscribe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore:class",
          "docComment": "/**\n * In memory Datastore implementation.\n *\n * This is suitable for testing and single instance demonstration purposes.\n *\n * @see\n *\n * DataStore\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export default class implements "
            },
            {
              "kind": "Reference",
              "text": "DataStore",
              "canonicalReference": "@eventicle/eventicle-utilities!~DataStore:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "InMemoryDatastore",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#createEntity:member(1)",
              "docComment": "/**\n * @param type - Entity type or \"table\" name\n *\n * @param item - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "createEntity(workspaceId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", item: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workspaceId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "item",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "createEntity"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#deleteEntity:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteEntity(workspaceId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workspaceId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "deleteEntity"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#deleteMany:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteMany(workspaceId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", query: "
                },
                {
                  "kind": "Reference",
                  "text": "Query",
                  "canonicalReference": "@eventicle/eventicle-utilities!Query:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workspaceId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "deleteMany"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#events:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "events: "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#findEntity:member(1)",
              "docComment": "/**\n * @param workspaceId - \n *\n * @param type - Entity type or \"table\" name\n *\n * @param query - Json object to match fields\n *\n * @param sorting - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findEntity(workspaceId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", query: "
                },
                {
                  "kind": "Reference",
                  "text": "Query",
                  "canonicalReference": "@eventicle/eventicle-utilities!Query:type"
                },
                {
                  "kind": "Content",
                  "text": ", sorting?: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSorting",
                  "canonicalReference": "@eventicle/eventicle-utilities!~DataSorting:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "@eventicle/eventicle-utilities!~Record:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workspaceId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "sorting",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "findEntity"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#findEntityPaginated:member(1)",
              "docComment": "/**\n * @param workspaceId - \n *\n * @param type - Entity type or \"table\" name\n *\n * @param query - Json object to match fields\n *\n * @param sorting - \n *\n * @param page - page count\n *\n * @param pageSize - page size\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findEntityPaginated(workspaceId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", query: "
                },
                {
                  "kind": "Reference",
                  "text": "Query",
                  "canonicalReference": "@eventicle/eventicle-utilities!Query:type"
                },
                {
                  "kind": "Content",
                  "text": ", sorting: "
                },
                {
                  "kind": "Reference",
                  "text": "DataSorting",
                  "canonicalReference": "@eventicle/eventicle-utilities!~DataSorting:interface"
                },
                {
                  "kind": "Content",
                  "text": ", page: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", pageSize: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "PagedRecords",
                  "canonicalReference": "@eventicle/eventicle-utilities!~PagedRecords:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 13,
                "endIndex": 17
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workspaceId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "query",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "sorting",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "page",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "pageSize",
                  "parameterTypeTokenRange": {
                    "startIndex": 11,
                    "endIndex": 12
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "findEntityPaginated"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#getEntity:member(1)",
              "docComment": "/**\n * @param type - Entity type or \"table\" name\n *\n * @param id - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEntity(workspaceId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "@eventicle/eventicle-utilities!~Record:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workspaceId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "getEntity"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#getTransactionData:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTransactionData(): "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionData",
                  "canonicalReference": "@eventicle/eventicle-utilities!~TransactionData:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "getTransactionData"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#hasTransactionData:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasTransactionData(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "hasTransactionData"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#on:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "\"transaction.start\" | \"transaction.commit\""
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string, data: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionData",
                  "canonicalReference": "@eventicle/eventicle-utilities!~TransactionData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "on"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#purge:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "purge(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "purge"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#saveEntity:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "saveEntity(workspaceId: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", item: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "@eventicle/eventicle-utilities!~Record:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "@eventicle/eventicle-utilities!~Record:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "workspaceId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "item",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "saveEntity"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!InMemoryDatastore#transaction:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transaction<T>(exec: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "exec",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "transaction"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner:class",
          "docComment": "/**\n * A Scheduled Job Runner that uses node-cron, setTimeout and runs as a single node.\n *\n * Persists and loads schedules on process stop/ start in the datastore with the types `lock-manager-timer` and `lock-manager-cron`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LocalScheduleJobRunner implements "
            },
            {
              "kind": "Reference",
              "text": "ScheduleJobRunner",
              "canonicalReference": "@eventicle/eventicle-utilities!ScheduleJobRunner:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "LocalScheduleJobRunner",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `LocalScheduleJobRunner` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner#addScheduledTask:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addScheduledTask(component: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", config: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        isCron: true;\n        crontab: string;\n    } | {\n        isCron: false;\n        timeout: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ", data: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "component",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "data",
                  "parameterTypeTokenRange": {
                    "startIndex": 9,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addScheduledTask"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner#addScheduleTaskListener:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addScheduleTaskListener(component: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", exec: "
                },
                {
                  "kind": "Content",
                  "text": "(name: string, id: string, data: any) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "component",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "exec",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "addScheduleTaskListener"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner#clearAllTimers:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearAllTimers(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "clearAllTimers"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner#crons:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "crons: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, nodeCron."
                },
                {
                  "kind": "Reference",
                  "text": "ScheduledTask",
                  "canonicalReference": "@types/node-cron!ScheduledTask:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "crons",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner#events:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "events: "
                },
                {
                  "kind": "Reference",
                  "text": "EventEmitter",
                  "canonicalReference": "!\"\\\"events\\\"\"~EventEmitter:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "events",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner#hasSchedule:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasSchedule(component: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<boolean>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "component",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "hasSchedule"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner#removeSchedule:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeSchedule(component: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "component",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "removeSchedule"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner#startup:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startup(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "startup"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!LocalScheduleJobRunner#timers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timers: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, "
                },
                {
                  "kind": "Reference",
                  "text": "NodeJS.Timeout",
                  "canonicalReference": "!\"\\\"timers\\\"\"~__global.NodeJS.Timeout:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!metrics:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function metrics(): "
            },
            {
              "kind": "Content",
              "text": "{\n    \"view-latency\": any;\n    \"adapter-latency\": any;\n    \"saga-latency\": any;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "metrics"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@eventicle/eventiclejs!RawEventView:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface RawEventView "
            }
          ],
          "releaseTag": "Public",
          "name": "RawEventView",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!RawEventView#consumerGroup:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "consumerGroup: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "consumerGroup",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!RawEventView#handleEvent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleEvent: "
                },
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EncodedEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EncodedEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "handleEvent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@eventicle/eventiclejs!RawEventView#streamsToSubscribe:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "streamsToSubscribe: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "streamsToSubscribe",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!registerAdapter:function(1)",
          "docComment": "/**\n * This will connect the given EventAdapter to event streams.\n *\n * An EventAdapter is a `hot` subscription, and will receive events emitted after it first connects.\n *\n * If it is offline for a period, the backing event store (eg, Kafka) will allow the adapter to reconnect and pick up from where it had previous processed up to.\n *\n * @param adapter - \n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerAdapter(adapter: "
            },
            {
              "kind": "Reference",
              "text": "EventAdapter",
              "canonicalReference": "@eventicle/eventiclejs!EventAdapter:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventSubscriptionControl",
              "canonicalReference": "@eventicle/eventiclejs!EventSubscriptionControl:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "adapter",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "registerAdapter"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!registerCommand:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerCommand<I, O>(command: "
            },
            {
              "kind": "Reference",
              "text": "Command",
              "canonicalReference": "@eventicle/eventiclejs!Command:interface"
            },
            {
              "kind": "Content",
              "text": "<I, O>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "command",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "registerCommand"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!registerRawView:function(1)",
          "docComment": "/**\n * Will register a raw event view\n *\n * This subscribes it to the appropriate event streams. For every event received, handeEvent will be called.\n *\n * Events are not processed through the {@link EventClientCodec}, and so are observed encoded as an {@link EncodedEvent}\n *\n * This can be useful if you want to persist the event in a raw form, as a binary encoded stream.\n *\n * @param view - The View to subscribe to event streams\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerRawView(view: "
            },
            {
              "kind": "Reference",
              "text": "RawEventView",
              "canonicalReference": "@eventicle/eventiclejs!RawEventView:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventSubscriptionControl",
              "canonicalReference": "@eventicle/eventiclejs!EventSubscriptionControl:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "view",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "registerRawView"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!registerSaga:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerSaga<TimeoutNames, Y>(saga: "
            },
            {
              "kind": "Reference",
              "text": "Saga",
              "canonicalReference": "@eventicle/eventiclejs!Saga:class"
            },
            {
              "kind": "Content",
              "text": "<TimeoutNames, Y>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventSubscriptionControl",
              "canonicalReference": "@eventicle/eventiclejs!EventSubscriptionControl:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "saga",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TimeoutNames",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "Y",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "registerSaga"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!registerView:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function registerView(view: "
            },
            {
              "kind": "Reference",
              "text": "EventView",
              "canonicalReference": "@eventicle/eventiclejs!EventView:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "EventSubscriptionControl",
              "canonicalReference": "@eventicle/eventiclejs!EventSubscriptionControl:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "view",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "registerView"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!removeAllSagas:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeAllSagas(): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "removeAllSagas"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!removeXstateEvents:function(1)",
          "docComment": "/**\n * This function removes any internal xstate-status events from the given list. Use inside a {@link Command} in conjunction with an {@link XStateAggregate} to filter out any XState internal status events and not emit them to the event bus.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function removeXstateEvents(events: "
            },
            {
              "kind": "Reference",
              "text": "EventicleEvent",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "EventicleEvent",
              "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "events",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isOptional": false
            }
          ],
          "name": "removeXstateEvents"
        },
        {
          "kind": "Class",
          "canonicalReference": "@eventicle/eventiclejs!Saga:class",
          "docComment": "/**\n * A saga!\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Saga<TimeoutNames, InstanceData> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TimeoutNames",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "InstanceData",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Saga",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@eventicle/eventiclejs!Saga:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Saga` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!Saga#errorHandler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "errorHandler: "
                },
                {
                  "kind": "Content",
                  "text": "(saga: any, event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "errorHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 8
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!Saga#eventHandler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "eventHandler: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, {\n        config: "
                },
                {
                  "kind": "Reference",
                  "text": "HandlerConfig",
                  "canonicalReference": "@eventicle/eventiclejs!~HandlerConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, InstanceData, TimeoutNames>;\n        handle: (saga: "
                },
                {
                  "kind": "Reference",
                  "text": "SagaInstance",
                  "canonicalReference": "@eventicle/eventiclejs!SagaInstance:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>, event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "eventHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!Saga#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!Saga#on:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(eventName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", config: "
                },
                {
                  "kind": "Reference",
                  "text": "HandlerConfig",
                  "canonicalReference": "@eventicle/eventiclejs!~HandlerConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T, InstanceData, TimeoutNames>"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Content",
                  "text": "(saga: "
                },
                {
                  "kind": "Reference",
                  "text": "SagaInstance",
                  "canonicalReference": "@eventicle/eventiclejs!SagaInstance:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>, event: T) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Saga",
                  "canonicalReference": "@eventicle/eventiclejs!Saga:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 13
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "on"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!Saga#onError:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onError(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(saga: any, event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ", error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Saga",
                  "canonicalReference": "@eventicle/eventiclejs!Saga:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "onError"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!Saga#onTimer:member(1)",
              "docComment": "/**\n * Register a handler for a timer triggered saga step.\n *\n * @param name - The name of the timer\n *\n * @param handle - the\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onTimer(name: "
                },
                {
                  "kind": "Content",
                  "text": "TimeoutNames"
                },
                {
                  "kind": "Content",
                  "text": ", handle: "
                },
                {
                  "kind": "Content",
                  "text": "(saga: "
                },
                {
                  "kind": "Reference",
                  "text": "SagaInstance",
                  "canonicalReference": "@eventicle/eventiclejs!SagaInstance:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Saga",
                  "canonicalReference": "@eventicle/eventiclejs!Saga:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handle",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "onTimer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!Saga#startOn:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startOn<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ">(eventName: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", config: "
                },
                {
                  "kind": "Reference",
                  "text": "StartHandlerConfig",
                  "canonicalReference": "@eventicle/eventiclejs!~StartHandlerConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T, InstanceData, TimeoutNames>"
                },
                {
                  "kind": "Content",
                  "text": ", handler: "
                },
                {
                  "kind": "Content",
                  "text": "(saga: "
                },
                {
                  "kind": "Reference",
                  "text": "SagaInstance",
                  "canonicalReference": "@eventicle/eventiclejs!SagaInstance:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>, event: T) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Saga",
                  "canonicalReference": "@eventicle/eventiclejs!Saga:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 14,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "eventName",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 13
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "startOn"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!Saga#starts:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "starts: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, {\n        config: "
                },
                {
                  "kind": "Reference",
                  "text": "StartHandlerConfig",
                  "canonicalReference": "@eventicle/eventiclejs!~StartHandlerConfig:interface"
                },
                {
                  "kind": "Content",
                  "text": "<any, InstanceData, TimeoutNames>;\n        handle: (saga: "
                },
                {
                  "kind": "Reference",
                  "text": "SagaInstance",
                  "canonicalReference": "@eventicle/eventiclejs!SagaInstance:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>, event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "starts",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!Saga#streams:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "streams: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "streams",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!Saga#streamSubs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "streamSubs: "
                },
                {
                  "kind": "Reference",
                  "text": "EventSubscriptionControl",
                  "canonicalReference": "@eventicle/eventiclejs!EventSubscriptionControl:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "streamSubs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!Saga#subscribeStreams:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subscribeStreams(streams: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Saga",
                  "canonicalReference": "@eventicle/eventiclejs!Saga:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "streams",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "subscribeStreams"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!Saga#timerHandler:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timerHandler: "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, {\n        handle: (saga: "
                },
                {
                  "kind": "Reference",
                  "text": "SagaInstance",
                  "canonicalReference": "@eventicle/eventiclejs!SagaInstance:class"
                },
                {
                  "kind": "Content",
                  "text": "<TimeoutNames, InstanceData>) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>;\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timerHandler",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              },
              "isStatic": false,
              "isProtected": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!saga:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function saga<TimeoutNames, SagaInstanceData>(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Saga",
              "canonicalReference": "@eventicle/eventiclejs!Saga:class"
            },
            {
              "kind": "Content",
              "text": "<TimeoutNames, SagaInstanceData>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "TimeoutNames",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "SagaInstanceData",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "saga"
        },
        {
          "kind": "Class",
          "canonicalReference": "@eventicle/eventiclejs!SagaInstance:class",
          "docComment": "/**\n * The data for a single execution of a {@link Saga}\n *\n * Sagas are stateful concepts, and this type contains the state.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SagaInstance<TimeoutNames, T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TimeoutNames",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "SagaInstance",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `SagaInstance` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(internalData: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ", record?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "@eventicle/eventicle-utilities!~Record:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "internalData",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "record",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#endSaga:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endSaga(preserveInstanceData?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "preserveInstanceData",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "endSaga"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#get:member(1)",
              "docComment": "/**\n * Get a piece of arbitrary data from the saga instance\n *\n * @param name - THe key\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(name: "
                },
                {
                  "kind": "Content",
                  "text": "keyof T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "get"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#internalData:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly internalData: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "internalData",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#lastEvent:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lastEvent(): "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "lastEvent"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#record:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly record?: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "@eventicle/eventicle-utilities!~Record:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": true,
              "releaseTag": "Public",
              "name": "record",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#removeTimer:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "removeTimer(name: "
                },
                {
                  "kind": "Content",
                  "text": "TimeoutNames"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "removeTimer"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#set:member(1)",
              "docComment": "/**\n * Set a piece of arbitrary data into the saga instance\n *\n * @param name - The key\n *\n * @param value - the value. Must be able to encode to JSON.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(name: "
                },
                {
                  "kind": "Content",
                  "text": "keyof T"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "set"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#timersToAdd:member",
              "docComment": "/**\n * Private instance data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly timersToAdd: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        name: TimeoutNames;\n        config: {\n            isCron: true;\n            crontab: string;\n        } | {\n            isCron: false;\n            timeout: number;\n        };\n    }[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timersToAdd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#timersToRemove:member",
              "docComment": "/**\n * Private instance data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly timersToRemove: "
                },
                {
                  "kind": "Content",
                  "text": "TimeoutNames[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timersToRemove",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!SagaInstance#upsertTimer:member(1)",
              "docComment": "/**\n * Create (or overwrite) a timer to call. Can be either a simple timer (millis to wait), or a cron timer.\n *\n * If the timer is no longer wanted, it must be removed by calling {@see removeTimer}\n *\n * @param name - The timer to call\n *\n * @param config - \n *\n * @example\n * ```\n *\n * export function sagaWithTimeouts() {\n *   return saga<\"ShortTimeout\" | \"PollEveryDay\", never>(\n *     \"sagaWithTimeouts\"\n *   )\n *     .subscribeStreams([\"payments\"])\n *     .startOn(\"payment.created\", {}, async (instance, event) => {\n *       instance.upsertTimer(\"ShortTimeout\", {\n *         isCron: false,\n *         timeout: 5000,    // wait for 5s and then call.\n *       });\n *       instance.upsertTimer(\"PollEveryDay\", {\n *         isCron: true,\n *         crontab: \"0 4 * * *\" // will run every day at 4am\n *       });\n *     })\n *     .onTimer(\"ShortTimeout\", async (instance) => {\n *       // this will fire 5000ms after the auction created event arrives\n *       instance.endSaga();\n *     });\n *     .onTimer(\"PollEveryDay\", async (instance) => {\n *       // this will fire every day at 4am\n *       console.log(\"Running at 4am ... \")\n *     });\n * }\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "upsertTimer(name: "
                },
                {
                  "kind": "Content",
                  "text": "TimeoutNames"
                },
                {
                  "kind": "Content",
                  "text": ", config: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        isCron: true;\n        crontab: string;\n    } | {\n        isCron: false;\n        timeout: number;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "config",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "upsertTimer"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!scheduler:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function scheduler(): "
            },
            {
              "kind": "Reference",
              "text": "ScheduleJobRunner",
              "canonicalReference": "@eventicle/eventicle-utilities!ScheduleJobRunner:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "scheduler"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!setEventClient:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setEventClient(cl: "
            },
            {
              "kind": "Reference",
              "text": "EventClient",
              "canonicalReference": "@eventicle/eventiclejs!EventClient:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cl",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setEventClient"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!setEventClientCodec:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setEventClientCodec(cl: "
            },
            {
              "kind": "Reference",
              "text": "EventClientCodec",
              "canonicalReference": "@eventicle/eventiclejs!EventClientCodec:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "cl",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setEventClientCodec"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!setEventSourceName:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setEventSourceName(name: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "name",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setEventSourceName"
        },
        {
          "kind": "Function",
          "canonicalReference": "@eventicle/eventiclejs!setScheduler:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setScheduler(scheduler: "
            },
            {
              "kind": "Reference",
              "text": "ScheduleJobRunner",
              "canonicalReference": "@eventicle/eventicle-utilities!ScheduleJobRunner:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "scheduler",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "setScheduler"
        },
        {
          "kind": "Class",
          "canonicalReference": "@eventicle/eventiclejs!XStateAggregate:class",
          "docComment": "/**\n * An Eventicle Aggregate that uses the XState statechart to manage its internal state.\n *\n * @see\n *\n * https://book.eventicle.com/eventiclejs/book/aggregate-root-xstate.html\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class XStateAggregate<MACHINE> extends "
            },
            {
              "kind": "Reference",
              "text": "AggregateRoot",
              "canonicalReference": "@eventicle/eventiclejs!AggregateRoot:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "MACHINE",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "XStateAggregate",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@eventicle/eventiclejs!XStateAggregate:constructor(1)",
              "docComment": "/**\n * Constructor\n *\n * @param type - the name of the aggregate (e.g. \"complaints\")\n *\n * @param machineFactory - a function that returns a XState StateMachine (from a XState createMachine() function call)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", machineFactory: "
                },
                {
                  "kind": "Content",
                  "text": "(_this: any) => any"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "type",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "machineFactory",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!XStateAggregate#handleEvent:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleEvent(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "handleEvent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!XStateAggregate#initStateMachineService:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected initStateMachineService(initialState?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "initialState",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "isOptional": false,
              "name": "initStateMachineService"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!XStateAggregate#machineFactory:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly machineFactory: "
                },
                {
                  "kind": "Content",
                  "text": "(_this: any) => any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": true,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "machineFactory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!XStateAggregate#raiseEvent:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "raiseEvent(event: "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EventicleEvent",
                  "canonicalReference": "@eventicle/eventiclejs!EventicleEvent:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "raiseEvent"
            },
            {
              "kind": "Property",
              "canonicalReference": "@eventicle/eventiclejs!XStateAggregate#service:member",
              "docComment": "/**\n * XState State chart service for this aggregate instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "service: "
                },
                {
                  "kind": "Reference",
                  "text": "Interpreter",
                  "canonicalReference": "xstate!Interpreter:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "DefaultContext",
                  "canonicalReference": "xstate!DefaultContext:type"
                },
                {
                  "kind": "Content",
                  "text": ", any, "
                },
                {
                  "kind": "Reference",
                  "text": "EventObject",
                  "canonicalReference": "xstate!EventObject:interface"
                },
                {
                  "kind": "Content",
                  "text": ", {\n        value: any;\n        context: "
                },
                {
                  "kind": "Reference",
                  "text": "DefaultContext",
                  "canonicalReference": "xstate!DefaultContext:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }, "
                },
                {
                  "kind": "Reference",
                  "text": "TypegenDisabled",
                  "canonicalReference": "xstate!TypegenDisabled:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "service",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 11
              },
              "isStatic": false,
              "isProtected": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!XStateAggregate#shutdown:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "shutdown(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "isProtected": false,
              "overloadIndex": 1,
              "parameters": [],
              "isOptional": false,
              "name": "shutdown"
            },
            {
              "kind": "Method",
              "canonicalReference": "@eventicle/eventiclejs!XStateAggregate#xsend:member(1)",
              "docComment": "/**\n * Sends a XState Event into the interpreted XState machine\n *\n * @param msg - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected xsend(msg: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "isProtected": true,
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "msg",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "isOptional": false,
              "name": "xsend"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        }
      ]
    }
  ]
}
